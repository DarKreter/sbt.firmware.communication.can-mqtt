import argparse
import can
from can.interface import Bus
import cantools
from rsa import sign
from CanDecoder import CanDecoder
from CanID_autogenerated import *
import time
from mqtt import MQTT

# Call parameters
parser = argparse.ArgumentParser()
parser.add_argument("--can_socket", type=str, help="can0 or vcan0")
parser.add_argument("--mqtt_server", type=str, help="address of mqtt server ie. localhost or pwraerospace.edu.pl")
parser.add_argument("--dbc_file", type=str, help="path to dbc file")
args = parser.parse_args()

# Init can socket
can.rc['interface'] = 'socketcan'
can.rc['channel'] = args.can_socket
can.rc['bitrate'] = 250000
bus = Bus()


# config can decoder
canDecoder = CanDecoder(args.dbc_file)

# The callback for when a PUBLISH message is received from the server.
def callback(topic, threadValue):
    keys = topic.split("/")
    extID = canDecoder.get_arbitrationID(keys[0], keys[1])    

    canPayload = canDecoder.get_CANpayload(keys[1], keys[2], threadValue)

    print("Sending: {} = {}".format(topic, threadValue))
    bus.send( can.Message(arbitration_id=extID, data=canPayload, is_extended_id=True ))


# config MQTT
myMQTT = MQTT(args.mqtt_server, 1883)
myMQTT.subscribe("#", callback)
myMQTT.initConnection()

print("GO!")

while 1:
    time.sleep(1)
    pass
