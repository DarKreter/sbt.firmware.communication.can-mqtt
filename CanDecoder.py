import can
from can.interface import Bus
import cantools
from CanID_autogenerated import *

class CanDecoder:
    def __init__(self, dbcPath) -> None:
        self.db = cantools.database.load_file(dbcPath)
        self.arbitrationID = 0
        self.payload = bytearray()
        pass
    
    def decode_mess(self, id, payload):
        self.data = self.db.decode_message(self.get_paramID(id), payload)
        return self.data

    def get_paramID(self, arbitrationID):
        return (arbitrationID & 0x3FFC0) >> 6

    def get_sourceID(self, arbitrationID):
        return (arbitrationID & 0x3FC0000) >> 18
    
    def get_groupID(self, arbitrationID):
        return (arbitrationID & 0x3F)

    def get_priority(self, arbitrationID):
        return (arbitrationID & 0x1C000000) >> 26

    def get_arbitrationID(self, sourceID_str, paramID_str):
        sourceID    = nameToSourceID[sourceID_str]
        paramID     = nameToParamID[paramID_str]['ParamID']
        groupID     = nameToParamID[paramID_str]['GroupID']
        priority    = nameToParamID[paramID_str]['Priority']

        arbitrationID = (((priority & 0x07)     << 26) | 
                        ((sourceID  & 0xFF)     << 18) |
                        ((paramID   & 0x0FFF)   << 6)  |
                        ((groupID)  & 0x3F))

        return arbitrationID

    def get_CANpayload(self, paramIDname, signalName, signalValue):

        mess = self.db.get_message_by_name(paramIDname)
        signals = dict()
        for signal in mess.signals:
            if signalName == signal.name:
                signals[signal.name] = float(signalValue)
            else:
                signals[signal.name] = 0
            
        return mess.encode(signals)
